from machine import Pin, I2C
from ssd1306 import SSD1306_I2C
import network
import time
import esp

# OLED display setup
i2c = I2C(scl=Pin(22), sda=Pin(21))  # Adjust pins for your board
oled_width = 128
oled_height = 64
oled = SSD1306_I2C(oled_width, oled_height, i2c)

# Define pins
button_pin = Pin(2, Pin.IN)
tamper_pin = Pin(3, Pin.IN, Pin.PULL_UP)

# Wi-Fi setup
wifi = network.WLAN(network.STA_IF)
wifi.active(True)

# FPS tracking
previous_time = time.ticks_ms()
fps = 0

def display_message(message, duration=2000):
    """Display a message on the OLED for a specified duration."""
    oled.fill(0)
    oled.text(message, 0, 0)
    oled.show()
    time.sleep_ms(duration)

def log_ir_signal(signal):
    """Log IR signal (placeholder function since MicroPython doesn't have a built-in IR library)."""
    print(f"IR Signal Detected: {signal}")
    display_message("IR Detected!", 2000)

def scan_wifi_networks():
    """Scan for available Wi-Fi networks and display them."""
    oled.fill(0)
    oled.text("Scanning Wi-Fi...", 0, 0)
    networks = wifi.scan()
    
    if len(networks) == 0:
        oled.text("No networks found", 0, 10)
    else:
        oled.text(f"{len(networks)} networks found:", 0, 10)
        for net in networks:
            ssid, rssi = net[0].decode(), net[3]
            oled.text(f"{ssid} ({rssi}dBm)", 0, 20)
    
    oled.show()
    time.sleep(1)

def handle_button_press():
    """Handle button press event (send an IR signal or trigger some action)."""
    if button_pin.value() == 1:
        print("Button pressed, sending IR signal...")
        display_message("IR Signal Sent!", 2000)

def display_fps():
    """Calculate and display FPS (frames per second) on the OLED."""
    global previous_time, fps
    current_time = time.ticks_ms()
    
    # Calculate FPS
    if current_time - previous_time > 1000:  # Update every 1 second
        fps = 1000 // (current_time - previous_time)
        previous_time = current_time

        # Display FPS
        oled.fill(0)
        oled.text(f"FPS: {fps}", 0, 0)
        oled.show()

def deauth_attack(target_mac, ap_mac):
    """Deauth attack (not supported in MicroPython directly). Placeholder for now."""
    print(f"Sending deauth to {target_mac} via AP {ap_mac}")
    display_message("Deauth Sent!", 2000)

def main():
    """Main loop."""
    while True:
        # Check tamper switch
        if tamper_pin.value() == 0:
            print("Tamper detected! Halting system...")
            display_message("Tamper Alert!", 2000)
            while True:
                pass  # Infinite loop to stop execution

        # Handle button press (trigger deauth or IR sending)
        handle_button_press()

        # Scan Wi-Fi networks
        scan_wifi_networks()

        # Display FPS
        display_fps()

if __name__ == "__main__":
    main()
